!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fogColor=0,this.fogNear=10,this.fogFar=50};var i=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.clearcolor=2767426,this.width=window.innerWidth,this.height=window.innerHeight};var r=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fovy=60,this.aspect=window.innerWidth/window.innerHeight,this.near=.1,this.far=30,this.x=0,this.y=4,this.z=8,this.lookAt=new THREE.Vector3(0,0,0)};var a=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.color=16777215,this.color02=7647179,this.color03=1407425};function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var c=function e(){s(this,e),this.color=16777215,this.intensity=1,this.x=5,this.y=5,this.z=10},l=function e(){s(this,e),this.color=16777215,this.intensity=.2};!function(){window.addEventListener("load",(function(){!function(){e=new THREE.Scene,(s=new THREE.WebGLRenderer).setPixelRatio(window.devicePixelRatio),s.setClearColor(new THREE.Color(h.clearcolor)),s.setSize(h.width,h.height),s.sortObjects=!1,document.querySelector("#webgl").appendChild(s.domElement),(t=new THREE.PerspectiveCamera(n.fovy,n.aspect,n.near,n.far)).position.set(n.x,n.y,n.z),t.lookAt(n.lookAt),d=new THREE.BoxBufferGeometry(5,5,5),f=new THREE.EdgesGeometry(d),M=new THREE.LineBasicMaterial({color:v.color}),H=new THREE.LineSegments(f,M),w=new THREE.BoxBufferGeometry(3,3,3),u=new THREE.EdgesGeometry(w),g=new THREE.LineSegments(u,M),E=new THREE.BoxGeometry(5,5,5),(b=new THREE.MeshLambertMaterial({color:v.color02})).transparent=!0,b.opacity=.6,m=new THREE.Mesh(E,b),p=new THREE.BoxGeometry(3,3,3),(x=new THREE.MeshLambertMaterial({color:v.color03})).transparent=!0,x.opacity=.8,T=new THREE.Mesh(p,x),e.add(g,T,H,m),y=new THREE.SphereGeometry(.1,32,32),S=new THREE.MeshLambertMaterial({color:16777215});for(var o=0;o<100;o++)R=new THREE.Mesh(y,S),_.push(R),e.add(R),W=new THREE.Vector3(Math.cos(2*Math.PI*Math.random()),Math.sin(2*Math.PI*Math.random()),Math.cos(2*Math.PI*Math.random())),(O=new THREE.Vector3(0,0,0)).addScaledVector(W,.1*Math.random()+.02),A.push(O);(G=new THREE.Group).add(g,T,H,m),e.add(G),(C=new THREE.SpotLight(P.color,P.intensity)).position.set(50,50,100),e.add(C),L=new THREE.AmbientLight(j.color,j.intensity),e.add(L),new THREE.OrbitControls(t,s.domElement)}(),window.addEventListener("resize",(function(){s.setSize(window.innerWidth,window.innerHeight),t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix()}),!1),V()}));window.innerWidth,window.innerHeight;var e,t,n,s,h,d,w,f,u,E,p,y,m,T,H,g,R,M,v,b,x,S,z,C,P,L,j,G,O,B,W,_=[],A=[];function V(){s.render(e,t),G.rotation.y+=.01;for(var n=0;n<100;n++)z=_[n],B=A[n],z.position.add(B),z.position.x+z.scale.x/2>T.geometry.parameters.width/2&&(B.x*=-1),z.position.x-z.scale.x/2<-T.geometry.parameters.width/2&&(B.x*=-1),z.position.y+z.scale.y/2>T.geometry.parameters.height/2&&(B.y*=-1),z.position.y-z.scale.y/2<-T.geometry.parameters.height/2&&(B.y*=-1),z.position.z+z.scale.z/2>T.geometry.parameters.depth/2&&(B.z*=-1),z.position.z-z.scale.z/2<-T.geometry.parameters.depth/2&&(B.z*=-1);requestAnimationFrame(V)}new o,h=new i,n=new r,v=new a,P=new c,j=new l}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,